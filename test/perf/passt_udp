# SPDX-License-Identifier: GPL-2.0-or-later
#
# PASST - Plug A Simple Socket Transport
#  for qemu/UNIX domain socket mode
#
# PASTA - Pack A Subtle Tap Abstraction
#  for network namespace/tap device mode
#
# test/perf/passt_udp - Check UDP performance in passt mode
#
# Copyright (c) 2021 Red Hat GmbH
# Author: Stefano Brivio <sbrivio@redhat.com>

gtools	/sbin/sysctl ip jq nproc sleep iperf3 udp_rr # From neper
nstools	ip jq sleep iperf3 udp_rr
htools	bc head sed

test	passt: throughput and latency

guest	/sbin/sysctl -w net.core.rmem_max=16777216
guest	/sbin/sysctl -w net.core.wmem_max=16777216
guest	/sbin/sysctl -w net.core.rmem_default=16777216
guest	/sbin/sysctl -w net.core.wmem_default=16777216

gout	GW ip -j -4 route show|jq -rM '.[] | select(.dst == "default").gateway'
gout	GW6 ip -j -6 route show|jq -rM '.[] | select(.dst == "default").gateway'
gout	IFNAME ip -j link show | jq -rM '.[] | select(.link_type == "ether").ifname'

hout	FREQ_PROCFS (echo "scale=1"; sed -n 's/cpu MHz.*: \([0-9]*\)\..*$/(\1+10^2\/2)\/10^3/p' /proc/cpuinfo) | bc -l | head -n1
hout	FREQ_CPUFREQ (echo "scale=1"; printf '( %i + 10^5 / 2 ) / 10^6\n' $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq) ) | bc -l
hout	FREQ [ -n "__FREQ_CPUFREQ__" ] && echo __FREQ_CPUFREQ__ || echo __FREQ_PROCFS__

set	THREADS 4
set	STREAMS 1
set	TIME 10
set	OPTS -u -P __STREAMS__ --pacing-timer 1000

info	Throughput in Gbps, latency in Âµs, __THREADS__ threads at __FREQ__ GHz, one stream each

report	passt udp __THREADS__ __FREQ__

th	MTU 256B 576B 1280B 1500B 9000B 65520B


tr	UDP throughput over IPv6: guest to host
bw	-
bw	-
guest	ip link set dev __IFNAME__ mtu 1280
iperf3	BW guest ns __GW6__%__IFNAME__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 2G
bw	__BW__ 0.8 1.2
guest	ip link set dev __IFNAME__ mtu 1500
iperf3	BW guest ns __GW6__%__IFNAME__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 1.0 1.5
guest	ip link set dev __IFNAME__ mtu 9000
iperf3	BW guest ns __GW6__%__IFNAME__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 5G
bw	__BW__ 4.0 5.0
guest	ip link set dev __IFNAME__ mtu 65520
iperf3	BW guest ns __GW6__%__IFNAME__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 7G
bw	__BW__ 4.0 5.0

tl	UDP RR latency over IPv6: guest to host
lat	-
lat	-
lat	-
lat	-
lat	-
nsb	udp_rr --nolog -6
gout	LAT udp_rr --nolog -6 -c -H __GW6__%__IFNAME__ | sed -n 's/^throughput=\(.*\)/\1/p'
lat	__LAT__ 200 150


tr	UDP throughput over IPv4: guest to host
guest	ip link set dev __IFNAME__ mtu 256
iperf3	BW guest ns __GW__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 500M
bw	__BW__ 0.0 0.0
guest	ip link set dev __IFNAME__ mtu 576
iperf3	BW guest ns __GW__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 1G
bw	__BW__ 0.4 0.6
guest	ip link set dev __IFNAME__ mtu 1280
iperf3	BW guest ns __GW__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 2G
bw	__BW__ 0.8 1.2
guest	ip link set dev __IFNAME__ mtu 1500
iperf3	BW guest ns __GW__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 1.0 1.5
guest	ip link set dev __IFNAME__ mtu 9000
iperf3	BW guest ns __GW__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 6G
bw	__BW__ 4.0 5.0
guest	ip link set dev __IFNAME__ mtu 65520
iperf3	BW guest ns __GW__ 100${i}2 __THREADS__ __TIME__ __OPTS__ -b 7G
bw	__BW__ 4.0 5.0

tl	UDP RR latency over IPv4: guest to host
lat	-
lat	-
lat	-
lat	-
lat	-
nsb	udp_rr --nolog -4
gout	LAT udp_rr --nolog -4 -c -H __GW__ | sed -n 's/^throughput=\(.*\)/\1/p'
lat	__LAT__ 200 150


tr	UDP throughput over IPv6: host to guest
bw	-
bw	-
ns	ip link set dev lo mtu 1280
iperf3	BW ns guest  ::1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 2G
bw	__BW__ 0.8 1.2
ns	ip link set dev lo mtu 1500
iperf3	BW ns guest ::1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 2G
bw	__BW__ 1.0 1.5
ns	ip link set dev lo mtu 9000
iperf3	BW ns guest ::1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 3.0 4.0
ns	ip link set dev lo mtu 65520
iperf3	BW ns guest ::1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 3.0 4.0

tl	UDP RR latency over IPv6: host to guest
lat	-
lat	-
lat	-
lat	-
lat	-
guestb	udp_rr --nolog -P 10001 -C 10011 -6
sleep	1
nsout	LAT udp_rr --nolog -P 10001 -C 10011 -6 -c -H ::1 | sed -n 's/^throughput=\(.*\)/\1/p'
lat	__LAT__ 200 150
ns	ip link set dev lo mtu 65535


tr	UDP throughput over IPv4: host to guest
ns	ip link set dev lo mtu 256
iperf3	BW ns guest 127.0.0.1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 1G
bw	__BW__ 0.0 0.0
ns	ip link set dev lo mtu 576
iperf3	BW ns guest 127.0.0.1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 1G
bw	__BW__ 0.4 0.6
ns	ip link set dev lo mtu 1280
ns	ip addr add ::1 dev lo
iperf3	BW ns guest 127.0.0.1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 0.8 1.2
ns	ip link set dev lo mtu 1500
iperf3	BW ns guest 127.0.0.1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 1.0 1.5
ns	ip link set dev lo mtu 9000
iperf3	BW ns guest 127.0.0.1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 3.0 4.0
ns	ip link set dev lo mtu 65520
iperf3	BW ns guest 127.0.0.1 100${i}1 __THREADS__ __TIME__ __OPTS__ -b 3G
bw	__BW__ 3.0 4.0

tl	UDP RR latency over IPv4: host to guest
lat	-
lat	-
lat	-
lat	-
lat	-
guestb	udp_rr --nolog -P 10001 -C 10011 -4
sleep	1
nsout	LAT udp_rr --nolog -P 10001 -C 10011 -4 -c -H 127.0.0.1 | sed -n 's/^throughput=\(.*\)/\1/p'
lat	__LAT__ 200 150
ns	ip link set dev lo mtu 65535

te
